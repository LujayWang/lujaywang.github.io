{"meta":{"title":"LujayWang's Blog","subtitle":"","description":"","author":"Lujay Wang","url":"https://LujayWang.github.io","root":"/"},"pages":[{"title":"分类","date":"2021-09-02T10:37:10.578Z","updated":"2021-09-02T10:37:10.578Z","comments":false,"path":"categories/index.html","permalink":"https://lujaywang.github.io/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2021-09-02T10:37:10.487Z","updated":"2021-09-02T10:37:10.487Z","comments":false,"path":"/404.html","permalink":"https://lujaywang.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2021-09-02T10:37:10.546Z","updated":"2021-09-02T10:37:10.546Z","comments":false,"path":"books/index.html","permalink":"https://lujaywang.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-09-02T10:37:10.605Z","updated":"2021-09-02T10:37:10.605Z","comments":true,"path":"links/index.html","permalink":"https://lujaywang.github.io/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-09-02T10:37:10.517Z","updated":"2021-09-02T10:37:10.516Z","comments":false,"path":"about/index.html","permalink":"https://lujaywang.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"Repositories","date":"2021-09-02T10:37:10.633Z","updated":"2021-09-02T10:37:10.633Z","comments":false,"path":"repository/index.html","permalink":"https://lujaywang.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-09-02T10:37:10.661Z","updated":"2021-09-02T10:37:10.661Z","comments":false,"path":"tags/index.html","permalink":"https://lujaywang.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Redis学习笔记(一）","slug":"Redis学习笔记-一）","date":"2021-09-05T06:21:03.000Z","updated":"2021-09-06T11:55:41.602Z","comments":true,"path":"2021/09/05/Redis学习笔记-一）/","link":"","permalink":"https://lujaywang.github.io/2021/09/05/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80%EF%BC%89/","excerpt":"","text":"❝ Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。本文Redis相关命令基于Linux CentOs 8系统 ❞ 一、如何将redis在后台启动？ 将redis的配置文件redis.conf的daemonize设置为yes再启动即可；也可以拷贝redis.conf文件，然后在修改拷贝的文件，redis-server 拷贝后文件地址命令指定新的配置文件地址。 二、redis压力测试1$ redis-benchmark -h 127.0.0.1 -p 6379 -c 50 -n 10000 三、Linux远程服务器上的redis怎么在本地通过可视化软件(Medis, Redist Manager Desktop)进行连接访问？ 1）去服务器安全组将对应的端口号放开 2）将端口的防火墙打开，并重启防火墙 ​ firewall-cmd –permanent –add-port=6379/tcp ​ firwall-cmd –reload 或者 systemctl restart firewalld.service 3）还是不行的，查看redis配置文件上的bind 127.0.0.1是否注释掉，protected-mode是否设置为no 四、常用命令1234567891011121314151617181920212223242526272829303132333435[root@LujayWang bin]# redis-cli -p 6379 #进入redis客户端127.0.0.1:6379&gt; ping #判断是否连接成功PONG127.0.0.1:6379&gt; select 1 #选择redis数据库，一共有16个，从0开始OK127.0.0.1:6379[1]&gt; set name &quot;wangqiwei&quot; #redis是以key-value键值对进行存储的，设置key为name的值为&quot;wangqiwei&quot;OK127.0.0.1:6379[1]&gt; get name #获取key值为name的值&quot;wangqiwei&quot;127.0.0.1:6379[1]&gt; keys * #查看所有键1) &quot;name&quot;127.0.0.1:6379[1]&gt; select 0 #第0号数据库为默认数据库OK127.0.0.1:6379&gt; flushdb #清空当前数据库的数据OK127.0.0.1:6379&gt; flushall #清空所有数据库的数据OK 127.0.0.1:6379&gt; keys * #查看所有键(empty list or set)127.0.0.1:6379&gt; set name wangqiweiOK127.0.0.1:6379&gt; type name #查看某个key值的数据类型string127.0.0.1:6379&gt; exists name #查看是否有存在名字为name的key，有返回1，没有返回0(integer) 1127.0.0.1:6379&gt; exists name1(integer) 0127.0.0.1:6379&gt; expire name 10 #设置name的过期时间为10s(integer) 1127.0.0.1:6379&gt; ttl name #查看key还有多久过期，整数表示还剩多少s过期，负数表示已过期(integer) 5127.0.0.1:6379&gt; ttl name(integer) -2127.0.0.1:6379&gt; keys *(empty list or set) 注意：Redis是单线程的！ 五、Redis数据类型1.String字符串类型1）常用字符串操作123456789101112131415161718192021################################127.0.0.1:6379&gt; flushdb OK127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; set key1 helloOK127.0.0.1:6379&gt; get key1&quot;hello&quot;127.0.0.1:6379&gt; append key1 ,redis #向key1中追加字符串，返回值追加后的字符串长度(integer) 11127.0.0.1:6379&gt; get key1&quot;hello,redis&quot;127.0.0.1:6379&gt; strlen key1 #获取key1字符串的长度(integer) 11127.0.0.1:6379&gt; append key2 lujaywang #如果append的key不存在，则会创建该key，值为追加的字符(integer) 9127.0.0.1:6379&gt; keys *1) &quot;key2&quot;2) &quot;key1&quot;################################## 2）操作数值型数据12345678910111213141516171819202122232425262728##################################127.0.0.1:6379&gt; flushdbOK127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; set value 0OK127.0.0.1:6379&gt; get value&quot;0&quot;127.0.0.1:6379&gt; type value #redis中的数值还是以字符串形式存储的，但不影响对其进行操作string127.0.0.1:6379&gt; incr value #对value的值加一，类似i++(integer) 1127.0.0.1:6379&gt; incr value(integer) 2127.0.0.1:6379&gt; decr value #对value的值减一，累死(integer) 1127.0.0.1:6379&gt; decr value(integer) 0127.0.0.1:6379&gt; incrby value 10 #对value的值加10，最后一个参数为步长，类似i += 10(integer) 10127.0.0.1:6379&gt; incrby value 10(integer) 20127.0.0.1:6379&gt; decrby value 10 #对value的值减10，最后一个参数为步长，累死i -= 10(integer) 10127.0.0.1:6379&gt; decrby value 10(integer) 0#################################### 3）字符操作扩展123456789101112131415161718####################################127.0.0.1:6379&gt; flushdbOK127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; set str hello,redisOK127.0.0.1:6379&gt; get str&quot;hello,redis&quot;127.0.0.1:6379&gt; getrange str 1 3 #获取字符串索引1到3的字符串，类似于java中substring操作&quot;ell&quot;127.0.0.1:6379&gt; getrange str 0 -1 #获取全部字符串，-1代表最后&quot;hello,redis&quot;127.0.0.1:6379&gt; setrange str 1 haha #将索引为1后面的&#x27;haha&#x27;长度字符串替换为&#x27;haha&#x27;，类似于java中replace操作(integer) 11127.0.0.1:6379&gt; get str&quot;hhaha,redis&quot;#################################### 4）设置获取字符串扩展1234567891011121314151617181920212223242526####################################127.0.0.1:6379&gt; flushdbOK127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; setex key1 15 hahahaha #set expire合并简写，创建key:value并设置过期时间,如果key已存在则修改值并设置过期时间OK127.0.0.1:6379&gt; get key1&quot;hahahaha&quot;127.0.0.1:6379&gt; ttl key1(integer) 7127.0.0.1:6379&gt; ttl key1(integer) -2127.0.0.1:6379&gt; get key1(nil)127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; setnx key2 xixixi #set if not exit简写，如果不存在就创建key:value,存在就不会进行创建和修改值(integer) 1127.0.0.1:6379&gt; get key2&quot;xixixi&quot;127.0.0.1:6379&gt; setnx key2 hehehe(integer) 0127.0.0.1:6379&gt; get key2&quot;xixixi&quot;#################################### 5）组合操作12345678910111213141516171819202122####################################127.0.0.1:6379&gt; flushdbOK127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; mset key1 a key2 b key3 c #同时对key1,key2,key3进行赋值OK127.0.0.1:6379&gt; mget key1 key2 key3 #同时获取key1,key2,key3的值1) &quot;a&quot;2) &quot;b&quot;3) &quot;c&quot;127.0.0.1:6379&gt; msetnx key1 d key4 d #如果key1,key4都不存在，则设置key1,key4的值；有一个存在，则都不进行设置；具有原子性，要么一起成功，要么一起失败！(integer) 0127.0.0.1:6379&gt; mget key1 key41) &quot;a&quot;2) (nil)127.0.0.1:6379&gt; msetnx key4 3 key5 2(integer) 1127.0.0.1:6379&gt; mget key4 key51) &quot;3&quot;2) &quot;2&quot;#################################### 6）对象操作1234567891011####################################127.0.0.1:6379&gt; flushdbOK127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; set user &quot;&#123;name:&#x27;wangqiwei&#x27;,age:18&#125;&quot; #设置json字符串的方式OK127.0.0.1:6379&gt; set user:name wangqiwei #设置key值的方式分别设置，单个字段或者字段不多的情况下推荐使用OK127.0.0.1:6379&gt; set user:age 18 #设置key值的方式分别设置OK 2.List列表类型3.Set集合类型4.Hash哈希类型5.Zset有序集合类型6.Geospatial地理位置7.Hyperloglog基数统计8.Bitmap位图场景","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"数据库","slug":"后端开发/数据库","permalink":"https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"后端","slug":"后端","permalink":"https://lujaywang.github.io/tags/%E5%90%8E%E7%AB%AF/"},{"name":"redis","slug":"redis","permalink":"https://lujaywang.github.io/tags/redis/"},{"name":"noSql","slug":"noSql","permalink":"https://lujaywang.github.io/tags/noSql/"}]},{"title":"MySQL你真的会了吗？","slug":"MySQL你真的会了吗？","date":"2021-09-04T08:44:09.000Z","updated":"2021-09-06T07:19:24.777Z","comments":true,"path":"2021/09/04/MySQL你真的会了吗？/","link":"","permalink":"https://lujaywang.github.io/2021/09/04/MySQL%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E4%BA%86%E5%90%97%EF%BC%9F/","excerpt":"","text":"","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"数据库","slug":"后端开发/数据库","permalink":"https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"后端","slug":"后端","permalink":"https://lujaywang.github.io/tags/%E5%90%8E%E7%AB%AF/"},{"name":"MySQL","slug":"MySQL","permalink":"https://lujaywang.github.io/tags/MySQL/"}]},{"title":"Linux常用命令大全","slug":"Linux常用命令大全","date":"2021-09-04T06:07:29.000Z","updated":"2021-09-06T11:55:53.208Z","comments":true,"path":"2021/09/04/Linux常用命令大全/","link":"","permalink":"https://lujaywang.github.io/2021/09/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/","excerpt":"","text":"❝ Linux其实是前后端都必会的技能，前端目前很多童鞋都再走大前端路线，后端就更不用说了，小编通过学习B站上的狂神老师的Linux最通俗易懂的教程学习了相关的命令并对其进行整理，可以说这些都是必须掌握的，当然这些也是不够的，后面小编还会在之后的工作生活中继续整理更新，大家可以关注我的动态，盘起来，这波可以收藏起来了。 ❞ 一、目录相关命令1$ ls [选项]... [文件]... #查看当前目录 常用选项： -a： all，查看所有文件，包括隐藏文件 -l：列出所有的文件包括隐藏文件，ls -l可以简写成ll 1$ cd [选项] [目录路径] #跳转到某个目录 目录路径分位相对路径和绝对路径 相对路径：以/开头。例如：/usr/local 绝对路径：以./或者../开头，./代表当前目录，../代表当前目录所在的目录。例如：./usr,../usr 1234567$ pwd #查看当前文件所在目录$ mkdir test #创建一个目录$ mkdir test1/test2/test3 #test1，test2目录必须存在，否则会报错$ mkdir -p test1/test2/test3 #可以递归创建目录，test1，test2目录可以不存在 $ rmdir test #删除test目录$ rmdir test1/test2 #报错，不能删除不为空的目录$ rmdir -p test1/test2 #可以递归删除目录，⚠️test1下必须只有test2目录不能有其他文件或者目录 1$ cp [选项] 文件1 文件2 #拷贝文件1到文件2 常用选项： -r：recursive，递归复制 -f：force，强制复制，遇到相同文件不会提示直接进行覆盖 -i：互动，复制时会提示是否复制 1rm [选项] 文件或者目录 #删除文件或者目录 常用选项： -r：recursive，递归删除 -f：force，强制删除，遇到相同文件不会提示直接进行删除 -i：互动，删除时提示是否删除 警告⚠️：不要尝试使用rm -rf /命令，会删除所有的文件及目录，即我么常说的删库跑路。 二、文件属性查看及修改 通过ll和ls -l查看当前目录的文件属性 每行第一个字母 [d]代表目录，directory； [-]代表文件； [l]代表链接，link。 另外九个字符分别为三中不同用户组的权限，每三个为一组，分别代表可读可写可执行，三中用户组分别为root用户组，普通用户和游客用户组，其他用户组 123$ chmod [-R] 权限 文件或者目录 #修改文件或者目录的权限$ chown [-R] lujaywang 文件或者目录 #修改文件目录的属主及所有者owner，上图第三个字段$ chgrp [-R] root 文件或者目录 #修改文件的属组及group，上图第四个字段 chmod的权限由三个0，1，2，3，5，7之间数字组成，例如：777，分别代表三个不同的用户组的三个权限，每个数字转换成三位的二进制，例如：1代表001，3代表011，7代表111。三个数字分别代表rwx及可读可写可执行，0代表没有权限即”-“，1代表有权限。 321：-wx-w–x 777：rwxrwxrwx 537：r-x-wxrwx 三、文件的查看1234567$ cat [-n] 文件 #查看文件全部内容，加上-n会显示行号$ tac 文件 #从后往前显示文件全部内容$ nl 文件 #相当于cat -n 文件，显示全部内容加上行号$ more 文件 #显示部分内容，enter键显示更多行，空格键分页，会显示当前内容占全部的比例$ less 文件 #显示部分内容，空格键分页，↑↓键上下查看内容，但是不会显示当前内容占全部的比例$ head [-n number] 文件 #显示头上内容，有-n显示头上number行，没有默认显示10行数据$ tail [-n number] 文件 #显示尾上内容，有-n显示尾上number行，没有默认显示10行数据 创建文件的方法 12$ touch 文件名 #创建文件$ vi / vim 文件名 #通过vi或者和vim方式创建文件 四、硬链接和软链接硬链接：指向文件，文件删除了，硬链接还是可以打开，放在重要文件上，防止误删； 软连接：指向文件，文件删除，软连接也失效了，相当于windows上的快捷方式。 123$ touch f1 #创建f1文件$ ln f1 f2 #创建硬链接f2，命令：ln 文件 链接名$ ln -s f1 f3 #创建软链接f3，加上-s代表创建软连接 三个文件不管哪个文件内容发生改变，另外两个文件内容也会发生改变。 f1删除之后，f3也会失效不能读取，f2还可以读取。","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://lujaywang.github.io/tags/Linux/"},{"name":"后端","slug":"后端","permalink":"https://lujaywang.github.io/tags/%E5%90%8E%E7%AB%AF/"}]},{"title":"Nginx学习总结(一)","slug":"Nginx学习总结-一","date":"2021-09-02T12:14:44.000Z","updated":"2021-09-06T07:23:01.763Z","comments":true,"path":"2021/09/02/Nginx学习总结-一/","link":"","permalink":"https://lujaywang.github.io/2021/09/02/Nginx%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%E4%B8%80/","excerpt":"","text":"个人Nginx学习过程问题及收获","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"后端","slug":"后端","permalink":"https://lujaywang.github.io/tags/%E5%90%8E%E7%AB%AF/"},{"name":"Nginx","slug":"Nginx","permalink":"https://lujaywang.github.io/tags/Nginx/"}]},{"title":"Hexo+Github搭建个人博客平台","slug":"Hexo+Github搭建个人博客平台","date":"2021-09-02T08:12:38.275Z","updated":"2021-09-06T03:50:05.036Z","comments":true,"path":"2021/09/02/Hexo+Github搭建个人博客平台/","link":"","permalink":"https://lujaywang.github.io/2021/09/02/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://lujaywang.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://lujaywang.github.io/tags/Github/"}]}],"categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"数据库","slug":"后端开发/数据库","permalink":"https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"后端","slug":"后端","permalink":"https://lujaywang.github.io/tags/%E5%90%8E%E7%AB%AF/"},{"name":"redis","slug":"redis","permalink":"https://lujaywang.github.io/tags/redis/"},{"name":"noSql","slug":"noSql","permalink":"https://lujaywang.github.io/tags/noSql/"},{"name":"MySQL","slug":"MySQL","permalink":"https://lujaywang.github.io/tags/MySQL/"},{"name":"Linux","slug":"Linux","permalink":"https://lujaywang.github.io/tags/Linux/"},{"name":"Nginx","slug":"Nginx","permalink":"https://lujaywang.github.io/tags/Nginx/"},{"name":"Hexo","slug":"Hexo","permalink":"https://lujaywang.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://lujaywang.github.io/tags/Github/"}]}