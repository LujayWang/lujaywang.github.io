<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LujayWang&#39;s Blog</title>
  
  
  <link href="https://lujaywang.github.io/atom.xml" rel="self"/>
  
  <link href="https://lujaywang.github.io/"/>
  <updated>2023-02-28T16:41:18.602Z</updated>
  <id>https://lujaywang.github.io/</id>
  
  <author>
    <name>Lujay Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bean生命周期</title>
    <link href="https://lujaywang.github.io/2023/02/28/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://lujaywang.github.io/2023/02/28/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2023-02-28T15:11:00.000Z</published>
    <updated>2023-02-28T16:41:18.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、bean的生命周期"><a href="#一、bean的生命周期" class="headerlink" title="一、bean的生命周期"></a>一、bean的生命周期</h1><p>bean的生命周期即<strong>bean从创建到销毁的全过程</strong>，但总体可以分为<strong>bean定义、实例化、属性填充、初始化（afterPropertiesSet）、生存期、销毁</strong>六个阶段。</p><h1 id="二、图解bean的生命周期"><a href="#二、图解bean的生命周期" class="headerlink" title="二、图解bean的生命周期"></a>二、图解bean的生命周期</h1><p><img src="/images/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/4b4f352001d3ebdf02b29fbbcfe70468.png" alt="bean的生命周期"></p><ol><li><strong>bean定义</strong>：通过ComponentScan扫描类并生成BeanDefinition；</li><li><strong>实例化bean</strong>：根据BeanDefinition生成对应的bean；</li><li><strong>属性填充</strong>：依赖注入填充bean的属性值；</li><li><strong>初始化</strong>：实现aware接口，设置对应的值 –&gt;调用InitializingBean的afterPropertiesSet方法 –&gt; 调用&lt; bean &gt;的 init-method方法；</li><li><strong>生存期</strong>：执行BeanPostProccessor的postProcessAfterinitialization()方法 –&gt; 将单例bean存入单例池中 –&gt; 将bean给调用方使用；</li><li><strong>销毁</strong>：调用DisposableBean的destory()方法（和InitializingBean对应）–&gt;  调用&lt; bean &gt;的destory-method方法。</li></ol><p><strong>注意：</strong>AOP(object orient program)的底层实现原理是通过实现BeanPostProcessor的postProcessAfterinitialization()方法，通过cglib的字节码增强器（Enhancer）生成bean的代理对象，经过AOP生成的bean是bean的代理对象和根据BeanDefinition实例化的bean是两个不同的对象，也就会导致事务传播机制中会存在同一个类中事务传播失效的问题（后续专门补充章节介绍）。</p><h1 id="三、代码测试"><a href="#三、代码测试" class="headerlink" title="三、代码测试"></a>三、代码测试</h1><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、bean的生命周期&quot;&gt;&lt;a href=&quot;#一、bean的生命周期&quot; class=&quot;headerlink&quot; title=&quot;一、bean的生命周期&quot;&gt;&lt;/a&gt;一、bean的生命周期&lt;/h1&gt;&lt;p&gt;bean的生命周期即&lt;strong&gt;bean从创建到销毁的全过程&lt;/</summary>
      
    
    
    
    <category term="后端开发" scheme="https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="spring" scheme="https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/spring/"/>
    
    
    <category term="后端" scheme="https://lujaywang.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="spring" scheme="https://lujaywang.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的事务隔离级别及脏读、幻读、不可重复读</title>
    <link href="https://lujaywang.github.io/2021/09/06/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E8%84%8F%E8%AF%BB-%E5%B9%BB%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/"/>
    <id>https://lujaywang.github.io/2021/09/06/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E8%84%8F%E8%AF%BB-%E5%B9%BB%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/</id>
    <published>2021-09-06T15:13:09.000Z</published>
    <updated>2021-09-24T09:44:16.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-数据库事务的隔离级别"><a href="#一-数据库事务的隔离级别" class="headerlink" title="一 数据库事务的隔离级别"></a>一 数据库事务的隔离级别</h2><p>数据库事务的隔离级别有4个，由低到高依次为Read uncommitted 、Read committed 、Repeatable read 、Serializable ，这四个级别可以逐个解决脏读 、不可重复读 、幻读这几类问题。</p><p><img src="/images/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E8%84%8F%E8%AF%BB-%E5%B9%BB%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/image-20210924174255294.png" alt="image-20210924174255294"></p><h3 id="1-Read-UnCommitted-读未提交"><a href="#1-Read-UnCommitted-读未提交" class="headerlink" title="1. Read UnCommitted(读未提交)"></a>1. Read UnCommitted(读未提交)</h3><p>最低的隔离级别。一个事务可以读取另一个事务并未提交的更新结果。</p><h3 id="2-Read-Committed-读提交"><a href="#2-Read-Committed-读提交" class="headerlink" title="2. Read Committed(读提交)"></a>2. Read Committed(读提交)</h3><p>大部分数据库采用的默认隔离级别。一个事务的更新操作结果只有在该事务提交之后，另一个事务才可以的读取到同一笔数据更新后的结果。</p><h3 id="3-Repeatable-Read-重复读"><a href="#3-Repeatable-Read-重复读" class="headerlink" title="3. Repeatable Read(重复读)"></a>3. Repeatable Read(重复读)</h3><p><strong>mysql的默认级别</strong>。整个事务过程中，对同一笔数据的读取结果是相同的，不管其他事务是否在对共享数据进行更新，也不管更新提交与否。</p><h3 id="4-Serializable-序列化"><a href="#4-Serializable-序列化" class="headerlink" title="4. Serializable(序列化)"></a>4. Serializable(序列化)</h3><p>最高隔离级别。所有事务操作依次顺序执行。注意这会导致并发度下降，性能最差。通常会用其他并发级别加上相应的并发锁机制来取代它。</p><h2 id="二-不同事务级别带来的并发问题"><a href="#二-不同事务级别带来的并发问题" class="headerlink" title="二 不同事务级别带来的并发问题"></a>二 不同事务级别带来的并发问题</h2><h3 id="1-脏读"><a href="#1-脏读" class="headerlink" title="1 脏读"></a>1 脏读</h3><p>脏读发生在一个事务A读取了被另一个事务B修改，但是还未提交的数据。假如B回退，则事务A读取的是无效的数据。这跟不可重复读类似，但是第二个事务不需要执行提交。 </p><p><img src="/images/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E8%84%8F%E8%AF%BB-%E5%B9%BB%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/image-20210924174325543.png" alt="image-20210924174325543"></p><h3 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="2 不可重复读"></a>2 不可重复读</h3><p>在基于锁的并行控制方法中，如果在执行select时不添加读锁，就会发生不可重复读问题。</p><p><img src="/images/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E8%84%8F%E8%AF%BB-%E5%B9%BB%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/image-20210924174341569.png" alt="image-20210924174341569"></p><p>在上面这个例子中，事务2提交成功，它所做的修改已经可见。然而，事务1已经读取了一个其它的值。在序列化和可重复读的隔离级别中，数据库管理系统会返回旧值，即在被事务2修改之前的值。在提交读和未提交读隔离级别下，可能会返回被更新的值，这就是“不可重复读”。</p><p>有两个策略可以防止这个问题的发生：</p><p>(1) 推迟事务2的执行，直至事务1提交或者回退。这种策略在使用锁时应用。</p><p>(2) 而在多版本并行控制中，事务2可以被先提交。而事务1，继续执行在旧版本的数据上。当事务1终于尝试提交时，数据库会检验它的结果是否和事务1、事务2顺序执行时一样。如果是，则事务1提交成功。如果不是，事务1会被回退。</p><p>3 <strong>幻读</strong> </p><p>幻读发生在当两个完全相同的查询执行时，第二次查询所返回的结果集跟第一个查询不相同。</p><p>发生的条件：没有范围锁。</p><p><img src="/images/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E8%84%8F%E8%AF%BB-%E5%B9%BB%E8%AF%BB-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/image-20210924174358118.png" alt="image-20210924174358118"></p><h2 id="三-例子比较不可重复读和幻读"><a href="#三-例子比较不可重复读和幻读" class="headerlink" title="三 例子比较不可重复读和幻读"></a>三 例子比较不可重复读和幻读</h2><h3 id="1-不可重复读"><a href="#1-不可重复读" class="headerlink" title="1 不可重复读"></a>1 不可重复读</h3><p>不可重复读的重点是修改: 同样的条件, 你读取过的数据, 再次读取出来发现值不一样了</p><p>例子:</p><p>在事务1中，Mary 读取了自己的工资为1000,操作并没有完成 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">con1 = getConnection();  </span><br><span class="line">select salary from employee empId =&quot;Mary&quot;;  </span><br></pre></td></tr></table></figure><p>在事务2中，这时财务人员修改了Mary的工资为2000,并提交了事务. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">con2 = getConnection();  </span><br><span class="line">update employee set salary = 2000;  </span><br><span class="line">con2.commit(); </span><br></pre></td></tr></table></figure><p>在事务1中，Mary 再次读取自己的工资时，工资变为了2000 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select salary from employee empId =&quot;Mary&quot;; </span><br></pre></td></tr></table></figure><p>在一个事务中前后两次读取的结果并不致，导致了不可重复读。</p><h3 id="2-幻读"><a href="#2-幻读" class="headerlink" title="2 幻读"></a>2 幻读</h3><p>幻读的重点在于新增或者删除 (数据条数变化)。同样的条件, 第1次和第2次读出来的记录数不一样</p><p>例子：</p><p>目前工资为1000的员工有10人。<br>事务1,读取所有工资为1000的员工。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">con1 = getConnection();  </span><br><span class="line">Select * from employee where salary =1000;  </span><br></pre></td></tr></table></figure><p>共读取10条记录 </p><p>这时另一个事务向employee表插入了一条员工记录，工资也为1000 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">con2 = getConnection();  </span><br><span class="line">Insert into employee(empId,salary) values(&quot;Lili&quot;,1000);  </span><br><span class="line">con2.commit();  </span><br></pre></td></tr></table></figure><p>事务1再次读取所有工资为1000的员工 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employee where salary =1000;  </span><br></pre></td></tr></table></figure><p>共读取到了11条记录，这就像产生了幻读。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-数据库事务的隔离级别&quot;&gt;&lt;a href=&quot;#一-数据库事务的隔离级别&quot; class=&quot;headerlink&quot; title=&quot;一 数据库事务的隔离级别&quot;&gt;&lt;/a&gt;一 数据库事务的隔离级别&lt;/h2&gt;&lt;p&gt;数据库事务的隔离级别有4个，由低到高依次为Read unco</summary>
      
    
    
    
    <category term="后端开发" scheme="https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="数据库" scheme="https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="后端" scheme="https://lujaywang.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MySQL" scheme="https://lujaywang.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="https://lujaywang.github.io/2021/09/05/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lujaywang.github.io/2021/09/05/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-05T06:21:03.000Z</published>
    <updated>2023-02-28T13:48:37.481Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>❝</p><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。本文Redis相关命令基于Linux CentOs 8系统</p><p>❞</p></blockquote><h1 id="一、如何将redis在后台启动？"><a href="#一、如何将redis在后台启动？" class="headerlink" title="一、如何将redis在后台启动？"></a>一、如何将redis在后台启动？</h1><p><img src="/images/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/A58B5780-2071-4CBF-AA3E-3B81838A4F36.png"></p><p>将redis的配置文件redis.conf的daemonize设置为yes再启动即可；也可以拷贝redis.conf文件，然后在修改拷贝的文件，<kbd>redis-server 拷贝后文件地址</kbd>命令指定新的配置文件地址。</p><h1 id="二、redis压力测试"><a href="#二、redis压力测试" class="headerlink" title="二、redis压力测试"></a>二、redis压力测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-benchmark -h 127.0.0.1 -p 6379 -c 50 -n 10000</span><br></pre></td></tr></table></figure><img src="/images/Redis学习笔记/707331-20180201145503750-901697180.png" align="left" /><h1 id="三、Linux远程服务器上的redis怎么在本地通过可视化软件-Medis-Redist-Manager-Desktop-进行连接访问？"><a href="#三、Linux远程服务器上的redis怎么在本地通过可视化软件-Medis-Redist-Manager-Desktop-进行连接访问？" class="headerlink" title="三、Linux远程服务器上的redis怎么在本地通过可视化软件(Medis, Redist Manager Desktop)进行连接访问？"></a>三、Linux远程服务器上的redis怎么在本地通过可视化软件(Medis, Redist Manager Desktop)进行连接访问？</h1><blockquote><p>1）去服务器安全组将对应的端口号放开</p><p>2）将端口的防火墙打开，并重启防火墙</p><p>​      firewall-cmd –permanent –add-port=6379/tcp</p><p>​      firwall-cmd –reload 或者 systemctl restart firewalld.service</p><p>3）还是不行的，查看redis配置文件上的bind 127.0.0.1是否注释掉，protected-mode是否设置为no</p></blockquote><h1 id="四、常用命令"><a href="#四、常用命令" class="headerlink" title="四、常用命令"></a>四、常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@LujayWang bin]<span class="comment"># redis-cli -p 6379  #进入redis客户端</span></span><br><span class="line">127.0.0.1:6379&gt; ping <span class="comment">#判断是否连接成功</span></span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; select 1<span class="comment">#选择redis数据库，一共有16个，从0开始</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> name <span class="string">&quot;wangqiwei&quot;</span> <span class="comment">#redis是以key-value键值对进行存储的，设置key为name的值为&quot;wangqiwei&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get name<span class="comment">#获取key值为name的值</span></span><br><span class="line"><span class="string">&quot;wangqiwei&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; keys *<span class="comment">#查看所有键</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; select 0<span class="comment">#第0号数据库为默认数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; flushdb<span class="comment">#清空当前数据库的数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; flushall <span class="comment">#清空所有数据库的数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment">#查看所有键</span></span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name wangqiwei</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name <span class="comment">#查看某个key值的数据类型</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; exists name <span class="comment">#查看是否有存在名字为name的key，有返回1，没有返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; exists name1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; expire name 10 <span class="comment">#设置name的过期时间为10s</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name <span class="comment">#查看key还有多久过期，整数表示还剩多少s过期，负数表示已过期</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：Redis是单线程的！</p></blockquote><h1 id="五、Redis数据类型"><a href="#五、Redis数据类型" class="headerlink" title="五、Redis数据类型"></a>五、Redis数据类型</h1><h2 id="1-String字符串类型"><a href="#1-String字符串类型" class="headerlink" title="1.String字符串类型"></a>1.String字符串类型</h2><h3 id="1）常用字符串操作"><a href="#1）常用字符串操作" class="headerlink" title="1）常用字符串操作"></a>1）常用字符串操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################</span></span><br><span class="line">127.0.0.1:6379&gt; flushdb </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; append key1 ,redis <span class="comment">#向key1中追加字符串，返回值追加后的字符串长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen key1 <span class="comment">#获取key1字符串的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; append key2 lujaywang <span class="comment">#如果append的key不存在，则会创建该key，值为追加的字符</span></span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key2&quot;</span></span><br><span class="line">2) <span class="string">&quot;key1&quot;</span></span><br><span class="line"><span class="comment">##################################</span></span><br></pre></td></tr></table></figure><h3 id="2）操作数值型数据"><a href="#2）操作数值型数据" class="headerlink" title="2）操作数值型数据"></a>2）操作数值型数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##################################</span></span><br><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> value 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get value</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> value <span class="comment">#redis中的数值还是以字符串形式存储的，但不影响对其进行操作</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; incr value <span class="comment">#对value的值加一，类似i++</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; incr value</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; decr value <span class="comment">#对value的值减一，累死</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; decr value</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; incrby value 10 <span class="comment">#对value的值加10，最后一个参数为步长，类似i += 10</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; incrby value 10</span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br><span class="line">127.0.0.1:6379&gt; decrby value 10 <span class="comment">#对value的值减10，最后一个参数为步长，累死i -= 10</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; decrby value 10</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">####################################</span></span><br></pre></td></tr></table></figure><h3 id="3）字符操作扩展"><a href="#3）字符操作扩展" class="headerlink" title="3）字符操作扩展"></a>3）字符操作扩展</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################################</span></span><br><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> str hello,redis</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get str</span><br><span class="line"><span class="string">&quot;hello,redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange str 1 3 <span class="comment">#获取字符串索引1到3的字符串，类似于java中substring操作</span></span><br><span class="line"><span class="string">&quot;ell&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange str 0 -1 <span class="comment">#获取全部字符串，-1代表最后</span></span><br><span class="line"><span class="string">&quot;hello,redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setrange str 1 haha <span class="comment">#将索引为1后面的&#x27;haha&#x27;长度字符串替换为&#x27;haha&#x27;，类似于java中replace操作</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get str</span><br><span class="line"><span class="string">&quot;hhaha,redis&quot;</span></span><br><span class="line"><span class="comment">####################################</span></span><br></pre></td></tr></table></figure><h3 id="4）设置获取字符串扩展"><a href="#4）设置获取字符串扩展" class="headerlink" title="4）设置获取字符串扩展"></a>4）设置获取字符串扩展</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################################</span></span><br><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; setex key1 15 hahahaha <span class="comment">#set expire合并简写，创建key:value并设置过期时间,如果key已存在则修改值并设置过期时间</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hahahaha&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ttl key1</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ttl key1</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; setnx key2 xixixi <span class="comment">#set if not exit简写，如果不存在就创建key:value,存在就不会进行创建和修改值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;xixixi&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx key2 hehehe</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;xixixi&quot;</span></span><br><span class="line"><span class="comment">####################################</span></span><br></pre></td></tr></table></figure><h3 id="5）组合操作"><a href="#5）组合操作" class="headerlink" title="5）组合操作"></a>5）组合操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################################</span></span><br><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; mset key1 a key2 b key3 c <span class="comment">#同时对key1,key2,key3进行赋值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget key1 key2 key3 <span class="comment">#同时获取key1,key2,key3的值</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx key1 d key4 d <span class="comment">#如果key1,key4都不存在，则设置key1,key4的值；有一个存在，则都不进行设置；具有原子性，要么一起成功，要么一起失败！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; mget key1 key4</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) (nil)</span><br><span class="line">127.0.0.1:6379&gt; msetnx key4 3 key5 2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; mget key4 key5</span><br><span class="line">1) <span class="string">&quot;3&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="comment">####################################</span></span><br></pre></td></tr></table></figure><h3 id="6）对象操作"><a href="#6）对象操作" class="headerlink" title="6）对象操作"></a>6）对象操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################################</span></span><br><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> user <span class="string">&quot;&#123;name:&#x27;wangqiwei&#x27;,age:18&#125;&quot;</span> <span class="comment">#设置json字符串的方式</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> user:name wangqiwei <span class="comment">#设置key值的方式分别设置，单个字段或者字段不多的情况下推荐使用</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> user:age 18 <span class="comment">#设置key值的方式分别设置</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="2-List列表类型"><a href="#2-List列表类型" class="headerlink" title="2.List列表类型"></a>2.List列表类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################################</span></span><br><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lpush list1 b c d <span class="comment">#创建list1列表初始化为b,c,d</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1 <span class="comment">#查看数据，（0，-1）表示全部数据</span></span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list1 a <span class="comment">#左边插入一条数据a</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list1 e <span class="comment">#右边插入数据e</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;e&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpop list1 <span class="comment">#左边删除一条数据，最后可以加一个数字代表删除多少条，没有默认一条</span></span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;e&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list1 <span class="comment">#右边删除一条数据，最后可以加一个数字代表删除多少条，没有默认一条</span></span><br><span class="line"><span class="string">&quot;e&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; llen list1 <span class="comment">#获取列表长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lset list1 1 f <span class="comment">#修改索引为1(从0开始)的值为f，列表必须存在且不能越界否则会报错 </span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;f&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list1 list2 <span class="comment">#list右边第一条数据删除并将这条数据从左边推入到list2中</span></span><br><span class="line"><span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 0 </span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list1 1 d <span class="comment">#删除list1中一条值为d的数据</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list1 before f a <span class="comment">#在list1的第一个值为f的前面插入一条数据啊</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list1 b c d e</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;e&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;a&quot;</span></span><br><span class="line">6) <span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list1 2 4 <span class="comment">#将list1的数据进行裁剪，保留索引为2到4之间的数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; exists list1 <span class="comment">#判断列表是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lindex list1 1 <span class="comment">#获取索引值为1的数据 </span></span><br><span class="line"><span class="string">&quot;f&quot;</span></span><br><span class="line"><span class="comment">##########################################</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>总结：</strong></em></p><p>增加数据：lpush、rpush、linsert、rpoplpush</p><p>删除数据：lpop、rpop、ltrim、lrem、rpoplpush</p><p>修改数据：lset</p><p>查看数据：lrange、lindex</p><p>查看长度：llen</p><p>判断是否存在：exists</p></blockquote><h2 id="3-Set集合类型"><a href="#3-Set集合类型" class="headerlink" title="3.Set集合类型"></a>3.Set集合类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########################################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello world redis <span class="comment">#创建myset并向其中添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers myset <span class="comment">#查看set的元素</span></span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;redis&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello <span class="comment">#判断某个值是否为set的元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; scard myset <span class="comment">#查看set的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; srem myset hello <span class="comment">#删除set中的某一个元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset <span class="comment">#随机查看set中的一个元素,后面可以加数字，查看随机几个元素</span></span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset <span class="comment">#随机删除set中的一个元素</span></span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 redis <span class="comment">#将myset中的一个元素移到myset2中，myset2不存在就自动创建</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sadd key1 a b c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 c d e</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sdiff key1 key2 <span class="comment">#key1中存在，key2中不存在的元素，差集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sinter key1 key2 <span class="comment">#交集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunion key1 key2 <span class="comment">#并集</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;e&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;d&quot;</span></span><br><span class="line"><span class="comment">#########################################</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>总结：</strong></em></p><p>sadd：创建并新增元素</p><p>smembers：查看set里面的元素</p><p>sismember：查看某个值是否为set中的元素</p><p>srem：删除指定的元素</p><p>srandmember：获取随机一个或者几个元素</p><p>spop：随机删除一个元素</p><p>smove：移动一个set中的元素到另一个set中</p><p>sdiff：查看两个set的差集</p><p>sinter：查看两个set的交集</p><p>sunion：查看两个set的并集</p></blockquote><h2 id="4-Hash哈希类型"><a href="#4-Hash哈希类型" class="headerlink" title="4.Hash哈希类型"></a>4.Hash哈希类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################################</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field1 a field2 b <span class="comment">#新建hash并初始化</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field1 <span class="comment">#获取hash中的某一个值</span></span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hmget myhash field1 field2 <span class="comment">#获取hash中的几个键值</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field1 c fied3 d <span class="comment">#批量设置属性值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash <span class="comment">#获取所有值</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;b&quot;</span></span><br><span class="line">5) <span class="string">&quot;fied3&quot;</span></span><br><span class="line">6) <span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash field1 <span class="comment">#删除hash中的某一个键值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;fied3&quot;</span></span><br><span class="line">4) <span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash <span class="comment">#获取hash的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field2 <span class="comment">#判断hash是否存在某一个键</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash <span class="comment">#获取hash的所有键</span></span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;fied3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash <span class="comment">#获取hash的所有值</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field4 5 </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field4 1 <span class="comment">#将键值+1</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field4 -1 <span class="comment">#将键值-1</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field5 d <span class="comment">#不存在就添加键和值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;fied3&quot;</span></span><br><span class="line">4) <span class="string">&quot;d&quot;</span></span><br><span class="line">5) <span class="string">&quot;field4&quot;</span></span><br><span class="line">6) <span class="string">&quot;5&quot;</span></span><br><span class="line">7) <span class="string">&quot;field5&quot;</span></span><br><span class="line">8) <span class="string">&quot;d&quot;</span></span><br><span class="line"><span class="comment">###########################################</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>总结：</strong></em></p><p>hset：创建并初始化值或者修改键值</p><p>hmset：功能与hset一致</p><p>hmget：同时获取hash多个键的值</p><p>hget：获取hash某个键的值</p><p>hgetall：获取hash所有的键值</p><p>hdel：删除hash某个键</p><p>hlen：获取hash长度</p><p>hexists：判断hash是否存在键</p><p>hkeys：获取hash所有键</p><p>hvals：获取hash所有值</p><p>hincrby：将hash的一个数值的键值+1，如果为负数则减一</p><p>hsetnx：如果不存在就向hash添加键值</p></blockquote><h2 id="5-Zset有序集合类型"><a href="#5-Zset有序集合类型" class="headerlink" title="5.Zset有序集合类型"></a>5.Zset有序集合类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 one <span class="comment">#创建并初始化zset或添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 two 3 three</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zrange myset 0 -1 <span class="comment">#查看所有元素</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zadd myset 10 ten</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore myset -inf +inf <span class="comment">#获取根据score增序排列zset</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;ten&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrange myset 0 -1 </span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;ten&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem myset ten <span class="comment">#删除zset中的某一个元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zcard myset <span class="comment">#查看zset的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zrevrange myset 0 -1 <span class="comment">#获取根据score降序排列的zset</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcount myset 2 3 <span class="comment">#查看zset中score在两个数值之间的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>总结：</strong></em></p><p>zadd：创建并初始化zset或添加元素</p><p>zrange：获取zset所有元素</p><p>zrangebyscore：根据score对zset进行增序排序，可以通过limit显示一部分，withscore显示score值</p><p>zrevrange：根据score对zset进行降序排列并显示</p><p>zcount：获取zset元素在score两个数值之间的个数</p><p>zcard：获取zset的长度</p><p>zrem：删除zset中某个元素</p></blockquote><h2 id="6-Geospatial地理位置"><a href="#6-Geospatial地理位置" class="headerlink" title="6.Geospatial地理位置"></a>6.Geospatial地理位置</h2><h2 id="7-Hyperloglog基数统计"><a href="#7-Hyperloglog基数统计" class="headerlink" title="7.Hyperloglog基数统计"></a>7.Hyperloglog基数统计</h2><h2 id="8-Bitmap位图场景"><a href="#8-Bitmap位图场景" class="headerlink" title="8.Bitmap位图场景"></a>8.Bitmap位图场景</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;❝&lt;/p&gt;
&lt;p&gt;Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI &lt;a href=&quot;https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80&quot;&gt;C语</summary>
      
    
    
    
    <category term="后端开发" scheme="https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="数据库" scheme="https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="后端" scheme="https://lujaywang.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="redis" scheme="https://lujaywang.github.io/tags/redis/"/>
    
    <category term="noSql" scheme="https://lujaywang.github.io/tags/noSql/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令大全</title>
    <link href="https://lujaywang.github.io/2021/09/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://lujaywang.github.io/2021/09/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2021-09-04T06:07:29.000Z</published>
    <updated>2021-09-06T11:55:53.208Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>❝</p><p>Linux其实是前后端都必会的技能，前端目前很多童鞋都再走大前端路线，后端就更不用说了，小编通过学习B站上的狂神老师的<a href="https://www.bilibili.com/video/BV187411y7hF?p=1">Linux最通俗易懂的教程</a>学习了相关的命令并对其进行整理，可以说这些都是必须掌握的，当然这些也是不够的，后面小编还会在之后的工作生活中继续整理更新，大家可以关注我的动态，盘起来，这波可以收藏起来了。</p><p>❞</p></blockquote><h1 id="一、目录相关命令"><a href="#一、目录相关命令" class="headerlink" title="一、目录相关命令"></a>一、目录相关命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls [选项]... [文件]... <span class="comment">#查看当前目录</span></span><br></pre></td></tr></table></figure><p>常用选项：</p><p>-a： all，查看所有文件，包括隐藏文件</p><p>-l：列出所有的文件包括隐藏文件，ls -l可以简写成ll</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> [选项] [目录路径] <span class="comment">#跳转到某个目录</span></span><br></pre></td></tr></table></figure><p>目录路径分位相对路径和绝对路径</p><p>相对路径：以/开头。例如：/usr/local</p><p>绝对路径：以./或者../开头，./代表当前目录，../代表当前目录所在的目录。例如：./usr,../usr</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span> <span class="comment">#查看当前文件所在目录</span></span><br><span class="line">$ mkdir <span class="built_in">test</span> <span class="comment">#创建一个目录</span></span><br><span class="line">$ mkdir test1/test2/test3 <span class="comment">#test1，test2目录必须存在，否则会报错</span></span><br><span class="line">$ mkdir -p test1/test2/test3 <span class="comment">#可以递归创建目录，test1，test2目录可以不存在  </span></span><br><span class="line">$ rmdir <span class="built_in">test</span> <span class="comment">#删除test目录</span></span><br><span class="line">$ rmdir test1/test2 <span class="comment">#报错，不能删除不为空的目录</span></span><br><span class="line">$ rmdir -p test1/test2 <span class="comment">#可以递归删除目录，⚠️test1下必须只有test2目录不能有其他文件或者目录</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp [选项] 文件1 文件2 <span class="comment">#拷贝文件1到文件2</span></span><br></pre></td></tr></table></figure><p>常用选项：</p><p>-r：recursive，递归复制</p><p>-f：force，强制复制，遇到相同文件不会提示直接进行覆盖</p><p>-i：互动，复制时会提示是否复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件或者目录 <span class="comment">#删除文件或者目录</span></span><br></pre></td></tr></table></figure><p>常用选项：</p><p>-r：recursive，递归删除</p><p>-f：force，强制删除，遇到相同文件不会提示直接进行删除</p><p>-i：互动，删除时提示是否删除</p><blockquote><p><strong>警告⚠️</strong>：不要尝试使用<kbd>rm -rf /</kbd>命令，会删除所有的文件及目录，即我么常说的删库跑路。</p></blockquote><h1 id="二、文件属性查看及修改"><a href="#二、文件属性查看及修改" class="headerlink" title="二、文件属性查看及修改"></a>二、文件属性查看及修改</h1><p> 通过ll和ls -l查看当前目录的文件属性<img src="./images/2CF9F03C-F7E5-479F-AB13-55BFC3117EB6.png" alt="image"></p><p>每行第一个字母</p><p>[d]代表目录，directory；</p><p>[-]代表文件；</p><p>[l]代表链接，link。</p><p>另外九个字符分别为三中不同用户组的权限，每三个为一组，分别代表可读可写可执行，三中用户组分别为root用户组，普通用户和游客用户组，其他用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod [-R] 权限 文件或者目录 <span class="comment">#修改文件或者目录的权限</span></span><br><span class="line">$ chown [-R] lujaywang 文件或者目录 <span class="comment">#修改文件目录的属主及所有者owner，上图第三个字段</span></span><br><span class="line">$ chgrp [-R] root 文件或者目录 <span class="comment">#修改文件的属组及group，上图第四个字段</span></span><br></pre></td></tr></table></figure><p>chmod的权限由三个0，1，2，3，5，7之间数字组成，例如：777，分别代表三个不同的用户组的三个权限，每个数字转换成三位的二进制，例如：1代表001，3代表011，7代表111。三个数字分别代表rwx及可读可写可执行，0代表没有权限即”-“，1代表有权限。</p><p>321：-wx-w–x</p><p>777：rwxrwxrwx</p><p>537：r-x-wxrwx</p><h1 id="三、文件的查看"><a href="#三、文件的查看" class="headerlink" title="三、文件的查看"></a>三、文件的查看</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat [-n] 文件 <span class="comment">#查看文件全部内容，加上-n会显示行号</span></span><br><span class="line">$ tac 文件 <span class="comment">#从后往前显示文件全部内容</span></span><br><span class="line">$ nl 文件 <span class="comment">#相当于cat -n 文件，显示全部内容加上行号</span></span><br><span class="line">$ more 文件 <span class="comment">#显示部分内容，enter键显示更多行，空格键分页，会显示当前内容占全部的比例</span></span><br><span class="line">$ less 文件 <span class="comment">#显示部分内容，空格键分页，↑↓键上下查看内容，但是不会显示当前内容占全部的比例</span></span><br><span class="line">$ head [-n number] 文件 <span class="comment">#显示头上内容，有-n显示头上number行，没有默认显示10行数据</span></span><br><span class="line">$ tail [-n number] 文件 <span class="comment">#显示尾上内容，有-n显示尾上number行，没有默认显示10行数据</span></span><br></pre></td></tr></table></figure><p>创建文件的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ touch 文件名 <span class="comment">#创建文件</span></span><br><span class="line">$ vi / vim  文件名 <span class="comment">#通过vi或者和vim方式创建文件</span></span><br></pre></td></tr></table></figure><h1 id="四、硬链接和软链接"><a href="#四、硬链接和软链接" class="headerlink" title="四、硬链接和软链接"></a>四、硬链接和软链接</h1><p>硬链接：指向文件，文件删除了，硬链接还是可以打开，放在重要文件上，防止误删；</p><p>软连接：指向文件，文件删除，软连接也失效了，相当于windows上的快捷方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ touch f1 <span class="comment">#创建f1文件</span></span><br><span class="line">$ ln f1 f2 <span class="comment">#创建硬链接f2，命令：ln 文件 链接名</span></span><br><span class="line">$ ln -s f1 f3 <span class="comment">#创建软链接f3，加上-s代表创建软连接</span></span><br></pre></td></tr></table></figure><p>三个文件不管哪个文件内容发生改变，另外两个文件内容也会发生改变。</p><p>f1删除之后，f3也会失效不能读取，f2还可以读取。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;❝&lt;/p&gt;
&lt;p&gt;Linux其实是前后端都必会的技能，前端目前很多童鞋都再走大前端路线，后端就更不用说了，小编通过学习B站上的狂神老师的&lt;a href=&quot;https://www.bilibili.com/video/BV187411y7hF?p=1</summary>
      
    
    
    
    <category term="后端开发" scheme="https://lujaywang.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="后端" scheme="https://lujaywang.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Linux" scheme="https://lujaywang.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
